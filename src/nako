#!/usr/bin/env bash

# Nako - Bash-based APT wrapper with Pacman syntax
# Copyright (c) 2023-2025, Nakamura Musical Industries Dojin Club.
# Copyright (c) 2023-2025, Hayate Nakamura (a.k.a. Jin Asanami).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, 
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice, 
#    this list of conditions and the following disclaimer in the documentation 
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its contributors 
#    may be used to endorse or promote products derived from this software 
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -eu

# Default Settings
nako_version="0.9"
nako_name="Nako"
nako_cmd="nako"
nako_path="$(dirname $(realpath ${0}))/$(basename ${0})"

# Executables
apt_cmd="/usr/bin/apt"
apt_mark_cmd="/usr/bin/apt-mark"
dpkg_cmd="/usr/bin/dpkg"
apt_args=()
dpkg_args=()

git_cmd="/usr/bin/git"
git_args=()

gpg_cmd="/usr/bin/gpg"
gpg_args=()

sudo_cmd="/usr/bin/sudo"
sudo_args=()

curl_cmd="/usr/bin/curl"
curl_args=()

# str options
operation="none"

# int options
option_i_count=0
option_y_count=0
option_u_count=0
sync_clean_count=0

# boolean options
bash_debug=false
debug=false
force_aur=false
msgdebug=false
nocolor=false
noconfirm=false
nodeps=false
nomakepkgconf=false
pkg_search=false
pkg_list=false
sync_update=false
sync_upgrade=false
pass_to_apt=false
needed=false
print_performing=false
quiet=false
downloadonly=false
system_stats=false
cleanbuild=none
redownload=none
asdeps=false
asexplicit=false

# Message configuration
# msg_common [-n] <label color> <label> <str1> <str2> ...
msg_common(){
	[[ "${msgdebug}" = true  ]] && set -xv
	[[ "${msgdebug}" = false ]] && set +xv
	local _msg_opts=("-e") _count _message _label
	_label="$(text -nc "${1}" "${2}")" && shift 2
	[[ "${1}" = "-n" ]] && _msg_opts+=("-n") && shift 1
	_message="$(text "${@}")"
	for _count in $(seq "1" "$(echo -ne "${_message}\n" | wc -l)"); do
#		echo "${_msg_opts[@]}" "$(text -nc cyan "[nako]") ${_label} $(echo -e "${_message}" | head -n "${_count}" | tail -n 1 )"
		echo "${_msg_opts[@]}" "$(text -nc cyan "[nako]") ${_label} $(printf "${_message}" | head -n "${_count}" | tail -n 1 )"
	done
	[[ "${bash_debug}" = true  ]] && set -xv
	[[ "${bash_debug}" = false ]] && set +xv
	return 0
}

# Show the info message
msg_info() { msg_common green "   Info" "${@}"; }

# Show the Warning message
msg_warn() { msg_common yellow "Warning" "${@}"; }

# Show the debug message
msg_debug() { [[ "${debug}" = true ]] && msg_common magenta "  Debug" "${@}"; return 0;}

# Show the ERROR message then exit with status
msg_error() { msg_common red "  Error" "${@}"; }

# Usage
text() {
	local OPTIND OPTARG arg _textcolor _decotypes="" _message _notranslate=false
	while getopts "c:bnfl" arg; do
		case "${arg}" in
			c)
				case "${OPTARG}" in
					"black"   ) _textcolor="30" ;;
					"red"     ) _textcolor="31" ;;
					"green"   ) _textcolor="32" ;;
					"yellow"  ) _textcolor="33" ;;
					"blue"    ) _textcolor="34" ;;
					"magenta" ) _textcolor="35" ;;
					"cyan"    ) _textcolor="36" ;;
					"white"   ) _textcolor="37" ;;
					*         ) return 1        ;;
				esac
				;;
			b) _decotypes="${_decotypes};1" ;;
			f) _decotypes="${_decotypes};5" ;;
			l) _decotypes="${_decotypes};4" ;;
			*) : ;;
		esac
	done
	shift "$((OPTIND - 1))"
	_message="${*}"
	if [[ "${nocolor}" = true ]]; then
		echo -ne "${@}"
	else
		echo -ne "\e[$([[ -v _textcolor ]] && echo -n ";${_textcolor}"; [[ -v _decotypes ]] && echo -n "${_decotypes}")m${_message}\e[m"
	fi
}

# Process

# Show message when file is removed
# remove <file> <file> ...
remove() {
	local _file
	for _file in "${@}"; do msg_debug "Removing ${_file}"; rm -rf "${_file}"; done
}

usage (){
	local _apt_help="${pass_to_apt}"

	local _nako_usage
	_nako_usage() {
		echo "Usage:"
		echo "${nako_cmd}"
		echo "${nako_cmd} <operation> [...]"
		echo
		echo "operations:"
		echo "    ${nako_cmd} {-h --help}"
		echo "    ${nako_cmd} {-V --version}"
		echo "    ${nako_cmd} {-Q --query}       [options] [package(s)]"
		echo "    ${nako_cmd} {-R --remove}      [options] <package(s)>"
		echo "    ${nako_cmd} {-S --sync}        [options] [package(s)]"
		echo "    ${nako_cmd} {-U --upgrade}     [options] <file(s)>"
		echo
		echo "new operations:"
		echo "    ${nako_cmd} {-N --nako}"
		echo "    ${nako_cmd} {-P --show}        [options]"
		echo "    ${nako_cmd} {-G --getsource}   [package(s)]"
		echo
		echo
		echo "Permanent configuration options:"
		echo "    --apt         <file>  apt command to use"
		echo "    --git         <file>  git command to use"
		echo "    --gitflags    <flags> Pass arguments to git"
		echo "    --gpg         <file>  gpg command to use"
		echo "    --gpgflags    <flags> Pass arguments to gpg"
		echo "    --config      <file>  apt.conf file to use"
		echo
		echo "show specific options:"
		echo "    -s --stats            Display system package statistics"
		echo
		echo "nako specific options:"
		echo "    -c --clean            Remove unneeded dependencies"
		echo
	}

	local _nako_usage_sync
	_nako_usage_sync() {
		echo "usage:  ${nako_cmd} {-S --sync} [options] [package(s)]"
		echo "options:"
		echo "  -b, --dbpath <path>  set an alternate database location"
		echo "  -c, --clean          remove old packages from cache directory (-cc for all)"
		echo "  -d, --nodeps         skip dependency version checks (-dd to skip all checks)"
		echo "  -i, --info           view package information (-ii for extended information)"
		echo "  -p, --print          print the targets instead of performing the operation"
		echo "  -q, --quiet          show less information for query and search"
		echo "  -s, --search <regex> search remote repositories for matching strings"
		echo "  -u, --sysupgrade     upgrade installed packages"
		echo "                       (-uu enables dist-upgrade, -uuu enables full-upgrade)"
		echo "  -w, --downloadonly   download packages but do not install/upgrade anything"
		echo "  -y, --refresh        download fresh package databases from the server"
		echo "                       (-yy to force a refresh even if up to date)"
		echo "      --arch <arch>    set an alternate architecture"
		echo "      --color <when>   colorise the output"
		echo "      --confirm        always ask for confirmation"
		echo "      --debug          display debug messages"
		echo "      --disable-download-timeout"
		echo "                       use relaxed timeouts for download"
		echo "      --gpgdir <path>  set an alternate home directory for GnuPG"
		echo "      --hookdir <dir>  set an alternate hook location"
		echo "      --ignore <pkg>   ignore a package upgrade (can be used more than once)"
		echo "      --ignoregroup <grp>"
		echo "                       ignore a group upgrade (can be used more than once)"
		echo "      --noconfirm      do not ask for any confirmation"
		echo "      --reinstall      reinstall packages"
	}

	local _nako_usage_query
	_nako_usage_query() {
		echo "usage:  ${nako_cmd} {-Q --query} [options] [package(s)]"
		echo "options:"
		echo "  -b, --dbpath <path>  set an alternate database location"
		echo "  -c, --changelog      view the changelog of a package"
		echo "  -d, --deps           list packages installed as dependencies [filter]"
		echo "  -i, --info           view package information (-ii for extended information)"
		echo "  -q, --quiet          show less information for query and search"
		echo "  -s, --search <regex> search locally-installed packages for matching strings"
		echo "  -v, --verbose        be verbose"
		echo "      --arch <arch>    set an alternate architecture"
		echo "      --color <when>   colorise the output"
		echo "      --config <path>  set an alternate configuration file"
		echo "      --confirm        always ask for confirmation"
		echo "      --debug          display debug messages"
		echo "      --disable-download-timeout"
		echo "                       use relaxed timeouts for download"
		echo "      --gpgdir <path>  set an alternate home directory for GnuPG"
		echo "      --hookdir <dir>  set an alternate hook location"
		echo "      --logfile <path> set an alternate log file"
		echo "      --noconfirm      do not ask for any confirmation"
	}

	local _nako_usage_remove
	_nako_usage_remove() {
		echo "usage:  ${nako_cmd} {-R --remove} [options] <package(s)>"
		echo "options:"
		echo "  -b, --dbpath <path>  set an alternate database location"
		echo "  -d, --nodeps         skip dependency version checks (-dd to skip all checks)"
		echo "  -n, --nosave         remove configuration files"
		echo "  -p, --print          print the targets instead of performing the operation"
		echo "  -r, --root <path>    set an alternate installation root"
		echo "  -s, --recursive      remove unnecessary dependencies"
		echo "                       (-ss includes explicitly installed dependencies)"
		echo "  -u, --unneeded       remove unneeded packages"
		echo "      --arch <arch>    set an alternate architecture"
		echo "      --color <when>   colorise the output"
		echo "      --config <path>  set an alternate configuration file"
		echo "      --confirm        always ask for confirmation"
		echo "      --debug          display debug messages"
		echo "      --disable-download-timeout"
		echo "                       use relaxed timeouts for download"
		echo "      --gpgdir <path>  set an alternate home directory for GnuPG"
		echo "      --hookdir <dir>  set an alternate hook location"
		echo "      --logfile <path> set an alternate log file"
		echo "      --noconfirm      do not ask for any confirmation"
	}


	local _nako_usage_version
	_nako_usage_version(){ _nako_usage; }

	if [[ "${operation}" = "none" ]]; then
		_nako_usage
	elif [[ "${_apt_help}" = true ]]; then
		"${apt_cmd}" -h "--${operation}"
	elif [[ "$(type -t "_nako_usage_${operation}" )" = "function" ]]; then
		eval "_nako_usage_${operation}"
	else
		case "${operation}" in
			database | deptest | upgrade | files)
				"${apt_cmd}" -h "--${operation}"
				;;
			*)
				msg_error "Help for this operation is not implemented"
				exit 1
				;;
		esac
	fi
}

set_operation() {
	if [[ "${operation}" = "none" ]]; then
		operation="${1}"
	elif [[ "${operation}" = "${1}" ]]; then
		return 0
	else
		msg_error "only one operation may be used at a time"
		exit 1
	fi
}

#_apt_conf(){ apt-conf --config="${apt_cfg}" "${@}"; }

run_sudo() { (( UID == 0 )) || eval "sudo" "${@}"; return 0 && eval "${@}"; }

run_apt() { run_sudo "${apt_cmd}" "${@}"; }

run_apt_mark() { run_sudo "${apt_mark_cmd}" "${@}"; }

nako() { "${nako_path}" "${@}"; }

# Add args to apt
# add_args [apt/makepkg/git/gpg/sudo/curl] <args1> <args2>...
add_args() {
	local _target="${1}" _args_array
	shift 1

	case "${_target}" in
		#"makepkg")
		#	makepkg_args+=("${@}")
		#	;;
		"apt")
			apt_args+=("${@}")
			;;
		"dpkg")
			dpkg_args+=("${@}")
			;;
		"git")
			git_args=("${@}")
			;;
		"gpg")
			gpg_args=("${@}")
			;;
		"sudo")
			sudo_args=("${@}")
			;;
		"curl") curl_args=("${@}")
			;;
		*)
			msg_error "Failed to set the argument of ${_target}"
			msg_error "Setting that command is not currently supported"
			exit 1
			;;
	esac

	msg_debug "${_target} ARGS: ${*}"
}

# Return 0 if the package specified by the argument is an AUR package
#check_repo_pkg() {
#	apt -Ssq "${1}" 2>/dev/null | grep -o ".*${1}$" 1> /dev/null 2>&1 && return 0 || return 1;
#}

check_repo_grp() {
	apt -Sgq 2>/dev/null | grep -o ".*${1}$" 1> /dev/null 2>&1 && return 0 || return 1;
}

# Return 0 if the package specified by the argument is already installed
check_installed_pkg() { "${apt_cmd}" list --installed --quiet "${1}" > /dev/null 2>&1 && return 0 || return 1; }

# Return 0 if the operation passed to this function is in progress.
check_operation() {
	[[ "${operation}" = "none" ]] && msg_error "no operation specified (use -h for help)" && return 2
	[[ ! "${1}" = "${operation}" ]] && { unavailable_in_this_operation ; return 1; }
	return 0
}

# Return the directory corresponding to the ~/.cache
get_cache_dir() {
	local _user_config_dir _cache_dir
	if [[ -v XDG_CONFIG_HOME ]]; then
		_user_config_dir="${XDG_CONFIG_HOME}"
	else
		_user_config_dir="${HOME}/.config"
	fi
	if [[ -f "${_user_config_dir}/user-dirs.dirs" ]]; then
		source "${_user_config_dir}/user-dirs.dirs"
	fi
	if [[ -v XDG_CACHE_HOME ]]; then
		_cache_dir="${XDG_CACHE_HOME}"
	else
		_cache_dir="${HOME}/.cache"
	fi
	echo -n "${_cache_dir}"
}

# Show the version
operation_version() {
	local _dpkg_version _apt_version

	# Get dpkg's version from APT
	_dpkg_version="$("${dpkg_cmd}" -s dpkg|grep -oP '(?<=Version: ).*')"

	# Get APT's version from APT
	_apt_version="$("${dpkg_cmd}" -s apt|grep -oP '(?<=Version: ).*')"

	echo
	echo "Nako ${nako_version}"
	echo "APT ${_apt_version} - dpkg ${_dpkg_version}"
	echo
	echo "Nako is an APT wrapper with Arch's Pacman syntax."
	echo
	echo "Copyright (C) 2023-2025 Nakamura Musical Industries Dojin Club"
	echo "Copyright (C) 2023-2025 Hayate Nakamura (a.k.a. Jin Asanami)"
	echo
	echo "This programme may be freely redistributed under"
	echo "the terms of the 3-clause BSD License."
	echo
}

operation_show() {
	local _installed_pkgs
	_installed_pkgs="$("${apt_cmd}" list --installed 2>/dev/null | wc -l)"
	if [[ "${system_stats}" = true ]]; then
		echo "Nako version %s" "${nako_version}"
		echo "==========================================="
		echo "Total installed packages: ${_installed_pkgs}"
		#echo "Foreign installed packages: ${_foreign_installed_pkgs}"
		#echo "Explicitly installed packages: ${_explicitly_installed_pkgs}"
		echo "==========================================="	
	else
		:
	fi
}

operation_remove() {
	local _pkg _not_found=false
	for _pkg in "${specified_pkgs[@]}"; do
		if ! check_installed_pkg "${_pkg}"; then
			msg_error "target not found: %s" "${_pkg}"
			_not_found=true
		fi
	done
	if [[ "${_not_found}" = true ]]; then
		exit 1
	else
		if [[ "${print_performing}" = true ]]; then
			"${apt_cmd}" remove --dry-run "${apt_args[@]}" "${sprcified_pkgs[@]}"
		else
		run_apt remove "${apt_args[@]}" "${specified_pkgs[@]}"
		fi
	fi
}

operation_getsource(){
	local _pkg
	for _pkg in "${specified_pkgs[@]}"; do
		"${apt_cmd}" source "${_pkg}"
	done
}

operation_sync(){
	local _pkg repo_pkg=()

	nako_cache_dir=$(get_cache_dir)/nako

	if [[ ! -d ${nako_cache_dir} ]]; then
		mkdir -p ${nako_cache_dir}
	fi

	if (( "${sync_clean_count}" >= 2 )); then
		run_sudo rm -rvf /var/cache/apt/*.bin
		run_sudo rm -rvf /var/cache/apt/archives/*.deb
		run_sudo rm -rvf /var/lib/apt/lists/*
	elif (( "${sync_clean_count}" == 1 )); then
		run_apt clean "${apt_args}"
	fi

	if [[ "${pkg_search}" = true ]]; then
		#for _pkg in "${specified_pkgs[@]}"; do
		#	search_aur_pkg "${_pkg}"
		#done
		"${apt_cmd}" search "${apt_args[@]}" "${specified_pkgs[@]}"
	elif [[ "${pkg_list}" = true ]]; then
		"${apt_cmd}" list "${apt_args[@]}" "${specified_pkgs[@]}"
	elif [[ "${print_performing}" = true ]]; then
		"${apt_cmd}" install --dry-run "${apt_args[@]}" "${specified_pkgs[@]}"
	elif (( "${option_i_count}" >= 1 )); then
		if [[ -z "${specified_pkgs[@]}" ]]; then
			"${apt_cmd}" info "${apt_args[@]}"
		else
			for _pkg in "${specified_pkgs[@]}"; do
				"${apt_cmd}" -S "${apt_args[@]}" "-$(yes "i" | head -n "${option_i_count}" | sed -z "s/\n//g")" "${specified_pkgs[@]}"
			done
		fi
	elif [[ "${sync_upgrade}" = true ]]; then
		run_apt update
		if (( "${option_u_count}" == 1 )); then
			run_apt upgrade "${apt_args[@]}"
		elif (( "${option_u_count}" == 2 )); then
			run_apt dist-upgrade "${apt_args[@]}"
		elif (( "${option_u_count}" >= 3 )); then
			run_apt full-upgrade "${apt_args[@]}"
		fi
	elif [[ "${sync_update}" = true ]]; then
		run_apt update "${apt_args[@]}"
	else
		for _pkg in "${specified_pkgs[@]}"; do
			repo_pkg+=("${_pkg}")
			#echo "${_pkg}" >> "${nako_cache_dir}"/pkgs.txt
		done

		# Install or download binary package
		if [[ "${#repo_pkg[@]}" != "0" ]]; then
			#echo ${repo_pkg[@]}
			if [[ "${downloadonly}" = true ]]; then
				"${apt_cmd}" download "${repo_pkg[@]}"
			else
				run_apt install "${apt_args[@]}" "${repo_pkg[@]}"
				if [[ "${asdeps}" = true ]]; then
					run_apt_mark auto "${repo_pkg[@]}"
				elif [[ "${asexplicit}" = true ]]; then
					run_apt_mark manual "${repo_pkg[@]}"
				fi
			fi
		fi
	fi
}

operation_query(){
	if [[ "${pkg_search}" = true ]]; then
		"${apt_cmd}" list --installed "${apt_args[@]}" "${specified_pkgs[@]}"
	elif [[ "${pkg_list}" = "true" ]]; then
		"${dpkg_cmd}" -L "${dpkg_args[@]}" "${specified_pkgs[@]}"
	elif (( "${option_i_count}" >= 1 )); then
		"${dpkg_cmd}" -s "${dpkg_args[@]}" "${specified_pkgs[@]}"
	else
		"${apt_cmd}" list --installed "${apt_args[@]}" "${specified_pkgs[@]}"
	fi
}

operation_nako() {
	#_no_need_packages="$(${apt_cmd} -Qtdq | sed -z "s/\n/ /g")"
	if [[ ${nako_operation} == "clean_all" ]]; then
		#if [[ ${_no_need_packages} == "" ]]; then
		#	exit 0
		#else
			run_apt autoremove "${apt_args[@]}"
		#fi
	fi
}

unavailable_in_this_operation() {
	msg_error "This option is not available in the current operation"
	return 1
}

# Run the operation
run_operation() {
	local _operation="${1}"
	msg_debug "Operation: %s" "${_operation}"

	eval "operation_${_operation}"
}

# Parse options
OPTS=("N" "Q" "R" "S" "U" "G" "h" "V" "P" "d" "b:" "a" "y" "e" "s" "u" "i" "c" "q" "n" "k" "r:" "l" "t" "w" "p" "q" "m" "g")
OPTL=("query" "remove" "sync" "help" "version" "debug" "nako" "show" "dbpath:" "getsource" "noconfirm" "info" "config:" "groups" "makepkg:" "mflags:" "apt:" "git:" "gitflags:" "gpg:" "gpgflags:" "makepkgconf:" "nomakepkgconf" "nodeps" "deps" "list" "refresh" "print" "file" "bash-debug" "msg-debug" "search" "sysupgrade" "color:" "nocolor" "clean" "quiet" "arch:" "confirm" "disable-download-timeout" "curl:" "curlflags:" "unneeded" "native" "puella" "nako-debug" "cascade" "ignoregroup:" "ignore:" "hookdir:" "gpgdir:" "cachedir:" "check" "root:" "asdeps" "asexplicit" "needed" "unrequired" "downloadonly" "foreign" "quiet" "stats" "moo")
GETOPT=(-o "$(printf "%s," "${OPTS[@]}")" -l "$(printf "%s," "${OPTL[@]}")" -- "${@}")
readarray -t PARSED_ARGS < <(getopt "${GETOPT[@]}")
RAW_ARGS=("${@}")

eval set -- "${PARSED_ARGS[@]}"
msg_debug "Argument: ${PARSED_ARGS[*]}"
unset OPTS OPTL

while true; do
	case "${1}" in
		-Q | --query)
			set_operation "query"
			pass_to_apt=false
			shift 1
			;;
		-R | --remove)
			set_operation "remove"
			pass_to_apt=false
			shift 1
			;;
		-S | --sync)
			set_operation "sync"
			pass_to_apt=false
			shift 1
			;;
		-V | --version)
			set_operation "version"
			pass_to_apt=false
			shift 1
			;;
		-U | --upgrade)
			set_operation "sync"
			pass_to_apt=false
			shift 1
			;;
		-N | --nako)
			set_operation "nako"
			pass_to_apt=false
			shift 1
			;;
		-G | --getsource)
			set_operation "getsource"
			pass_to_apt=false
			shift 1
			;;
		-P | --show)
			set_operation "show"
			pass_to_apt=false
			shift 1
			;;
		--)
			shift 1
			break
			;;
		*)
			shift 1
			;;
	esac
done

if [[ "${pass_to_apt}" = false ]]; then
	eval set -- "${PARSED_ARGS[@]}"
	getopt -Q "${GETOPT[@]}" || exit 1

	while true; do
		case "${1}" in
			# general short options
			-b | --dbpath)
				add_args apt "--dbpath '${2}'"
				shift 2
				;;
			-i | --info)
				option_i_count=$(( option_i_count + 1 ))
				shift 1
				;;
			#-k | --check)
			#	add_args apt "--check"
			#	shift 1
			#	;;
			-y | --refresh)
				sync_update="true"
				#option_y_count=$(( option_y_count + 1))
				shift 1
				;;
			-r | --root)
				add_args apt "--root" "${2}"
				shift 1
				;;
			-l | --list)
				pkg_list=true
				shift 1
				;;
			-w | --downloadonly)
			#	add_args apt "--downloadonly"
				downloadonly=true
				shift 1
				;;
			-q | --quiet)
				add_args apt "--quiet"
				quiet=true
				shift 1
				;;
			-h | --help)
				usage
				exit 0
				;;

			# general long options
			--asdeps)
				asdeps=true
				shift 1
				;;
			--asexplicit)
				asexplicit=true
				shift 1
				;;
			--bash-debug)
				bash_debug=true
				set -xv
				shift 1
				;;
			--clean)
				case ${operation} in
					"sync")
						sync_clean_count=$(( sync_clean_count + 1 ))
						;;
					"nako")
						nako_operation="clean_all"
						;;
				esac
				shift 1
				;;
			--cascade)
				add_args apt "--cascade"
				shift 1
				;;
			--cachedir)
				add_args apt "--cachedir" "${2}"
				shift 2
				;;
			--curl)
				curl_cmd="${2}"
				shift 2
				;;
			--curlflags)
				add_args curl "${2}"
				shift 2
				;;
			--confirm)
				noconfirm=false
				shift 1
				;;
			--debug)
				debug=true
				add_args apt "--debug"
				shift 1
				;;
			--file)
				add_args apt "--file"
				shift 1
				;;
			--gpgdir)
				add_args apt "--gpgdir ${2}"
				shift 2
				;;
			--git)
				git_cmd="${2}"
				shift 2
				;;
			--gitflags)
				add_args git "${2}"
				shift 2
				;;
			--hookdir)
				add_args apt "--hookdir ${2}"
				shift 2
				;;
			--ignoregroup)
				add_args apt "--ignoregroup ${2}"
				shift 2
				;;
			--ignore)
				add_args apt "--ignore ${2}"
				shift 2
				;;
			--msg-debug)
				msgdebug=true
				shift 1
				;;
			--native)
				add_args apt "--native"
				shift 1
				;;
			--noconfirm)
				add_args apt "--yes"
				noconfirm=true
				shift 1
				;;
			--nodeps)
				add_args apt "--force-depends"
				nodeps=true
				shift 1
				;;
			--nosave)
				add_args apt "--purge"
				shift 1
				;;
			--needed)
				add_args apt "--needed"
				needed=true
				shift 1
				;;
			--apt)
				apt_cmd="${2}"
				shift 2
				;;
			--print)
				print_performing=true
				shift 1
				;;
			--recursive)
				add_args apt "--autoremove"
				shift 1
				;;
			--search)
				pkg_search=true
				#add_args apt "--search"
				shift 1
				;;
			--sysupgrade)
				sync_upgrade=true
				option_u_count=$(( option_u_count + 1 ))
				shift 1
				;;
			--reinstall)
				add_args apt "--reinstall"
				shift 1
				;;
			--nako-debug)
				debug=true
				shift 1
				;;
			--stats)
				system_stats=true
				shift 1
				;;

			# Other long options
			--puella)
				text -flb "Please make a contract with me and become a Puella Magi !"
				echo
				shift 1
				exit 0
				;;
			--moo)
				echo "                 (__) "
				echo "                 (oo) "
				echo "           /------\/ "
				echo "          / |    ||   "
				echo "         *  /\---/\ "
				echo "            ~~   ~~   "
				echo "... Have you mooed today? ..."
				exit 0
				;;

			# Other short options
			-s)
				case "${operation}" in
					"sync" | "query")
						#add_args apt "--search"
						pkg_search=true
						;;
					"remove")
						add_args apt "--autoremove"
						;;
					"show")
						system_stats=true
						;;
					*)
						unavailable_in_this_operation
						;;
				esac
				shift 1
				;;
			-u)
				case "${operation}" in
					"sync") 
						sync_upgrade=true
						option_u_count=$(( option_u_count + 1 ))
						;;
					"none")
						:
						;;
					*)
						unavailable_in_this_operation
						;;
				esac
				shift 1
				;;
			-c)
				case "${operation}" in
					"sync")
						sync_clean_count=$(( sync_clean_count + 1 ))
						;;
					"remove")
						add_args apt "--cascade"
						;;
					"nako")
						nako_operation="clean_all"
						;;
					*)
						unavailable_in_this_operation
						;;
				esac
				shift 1
				;;
			-d)
				case "${operation}" in
					"query" | "sync" | "remove")
						add_args apt "--force-depends"
						nodeps=true
						;;
					*)
						unavailable_in_this_operation
						;;
				esac
				shift 1
				;;
			-n)
				case "${operation}" in
					"remove")
						add_args apt "--purge"
						;;
					*)
						unavailable_in_this_operation
						;;
				esac
				shift 1
				;;
			-p)
				case "${operation}" in
					"sync" | "remove")
						add_args apt "--dry-run"
						;;
					*)
						unavailable_in_this_operation
						;;
				esac
				shift 1
				;;
			#-- for getopt --#
			--)
				shift 1
				break
				;;
			* )
				shift 1
				;;
		esac
	done

	specified_pkgs=("${@}")
fi

if [[ "${pass_to_apt}" = false ]]; then
	# Run database update
	if (( "${option_y_count}" >= 1 )); then
		run_apt "${apt_args[@]}" update
	fi
fi

# Execute the operation set by "set_operation"
case "${operation}" in
	"version" | "sync" | "query" | "upgrade" | "remove" | "nako" | "getsource" | "show")
		run_operation "${operation}"
		;;
	"database" | "deptest" | "files")
		run_apt "${RAW_ARGS[@]}"
		;;
	"none")
		msg_error "no operation specified (use -h for help)"
		exit 1
		;;
	*)
		msg_error "Undefined operation"
		exit 1
		;;
esac

